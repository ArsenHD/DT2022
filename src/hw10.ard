\import Function.Meta
\import Logic.Meta
\import Meta
\import Paths.Meta
\import lect07 \hiding (<=-refl, baz, isEven)
\import lect10
\import Utils

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f)
  => \lam {x y : A} =>
      \lam ogfx=ogfy =>
          \let | fx=fy->x=y => p {x} {y}
               | gfx=gfy->fx=fy => q {f x} {f y}
               | fx=fy => gfx=gfy->fx=fy ogfx=ogfy
          \in fx=fy->x=y fx=fy

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f
  => unfold isInj $ \lam {x y : A} => \lam fx=fy =>
      \let | gfx=gfy->x=y => p {x} {y}
           | gfx=gfy => pmap g fx=fy
      \in gfx=gfy->x=y gfx=gfy

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type =>
  \case (mod3 n, mod5 n) \with {
    | (0, _) => \Sigma
    | (_, 0) => \Sigma
    | _ => Empty
  }

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) =>
  unfold (isProp, isMultipleOf3Or5) $ mcases (\lam x y => idp)

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => unfold (isInj, isMultipleOf3Or5) (\lam {x} {y} mi_x=mi_y => ext (mi_x=mi_y, isMultipleOf3Or5-isProp _ _ _))

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (aux1, aux2)
  \where {
    \func aux1 {A : \Type} (p : isTriv A) : \Sigma (isProp A) A
      => \let | a : A => p.1
              | q : \Pi (a' : A) -> a = a' => p.2
         \in (\lam x y => sym (q x) *> q y, a)

    \func aux2 {A : \Type} (p : \Sigma (isProp A) A) : isTriv A =>
      \let | a : A => p.2
           | q : \Pi (x : A) -> a = x => p.1 a
      \in (a, \lam x => q x)
  }

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty =>
  \let either_is_prop => p Unit-isProp Unit-isProp
  \in \case either_is_prop (Either.inl ()) (Either.inr ())

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) \elim n, m
  | 0, m => \lam p1 p2 => cases (p1, p2) \with {
    | z<=n, z<=n => idp
  }
  | suc n, 0 => \lam p1 p2 => cases (p1, p2)
  | suc n, suc m => \lam p1 p2 => cases (p1, p2) \with {
    | s<=s q1, s<=s q2 =>
      \let aux : q1 = q2 => LessOrEq-isProp q1 q2
      \in pmap s<=s aux
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m)
  => \lam x y => {?}

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty => {?}

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A
  => \lam x y => p (q (f x) (f y))

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => setLem
      (\lam x y => \case dec x y \with {
        | yes _ => \Sigma
        | no _ => Empty
      })
      (\lam x y => mcases \with {
        | yes p => Unit-isProp
        | no _ => contradiction
      })
      (\lam a => mcases \with {
        | yes p => ()
        | no _ => contradiction
      })
      (\lam {x} {y} => mcases \with {
        | yes p => \lam _ => p
        | no _ => contradiction
      })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func f {A B : \Type} (x : Or A B) : Nat => cases x \with {
  | inl a => 1
  | inr b => 2
}

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B)
  => setLem
      or-equality
      (\lam x y => cases (x, y) \with {
        | inl a, inl b => p a b
        | inl a, inr b => Empty-isProp
        | inr a, inl b => Empty-isProp
        | inr a, inr b => q a b
      })
      (\lam x => cases x \with {
        | inl a => idp
        | inr b => idp
      })
      (\lam {x} {y} => cases (x, y) \with {
        | inl _, inl _ => pmap inl
        | inl a, inr b => contradiction
        | inr b, inl a => contradiction
        | inr _, inr _ => pmap inr
      })
  \where {
    \func or-equality {A B : \Type} (x y : Or A B) : \Type \elim x, y
      | inl a, inl b => a = b
      | inr a, inr b => a = b
      | _, _ => Empty
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x)
  => setLem
    pi-equality
    (\lam f g x y => ext (\lam arg => p arg _ _ _ _))
    (\lam f x => idp)
    (\lam {x} {y} q => ext q)
  \where {
    \func pi-equality {A : \Type} {B : A -> \Type} (p1 p2 : \Pi (x : A) -> B x) : \Type
      => \Pi (x : A) -> p1 x = p2 x
  }

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => {?}

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}