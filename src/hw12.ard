\import Algebra.Meta
\import Logic (inP)
\import Logic.Meta
\import Meta
\import Utils
\import lect12

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int
  | neg n => neg (suc n)
  | pos 0 => neg 1
  | pos n => pos n

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int \elim x, y
  | pos a, pos b => pos (a Nat.+ b)
  | pos a, neg b => a Nat.- b
  | neg a, pos b => b Nat.- a
  | neg a, neg b => neg (a Nat.+ b)

\func \infixl 7 * (x y : Int) : Int \elim x, y
  | pos a, pos b => pos (a Nat.* b)
  | pos a, neg b => neg (a Nat.* b)
  | neg (suc a), pos b => neg (suc a Nat.* b)
  | neg (suc a), neg b => pos (suc a Nat.* b)

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | zero
  | sh BinNat \with {
    zero => zero
  }
  | sh+1 BinNat

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam b => inP (suc b, idp)

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty =>
  \case p 0 \with {
    | inP p => \case p.2
  }

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f) =>
  unfold o (\lam a =>
    \case q a \with {
      | inP (v, g_v=a) =>
        \case p v \with {
          | inP (u, f_u=v) => inP (u, cong)
        }
    }
  )

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g =>
  unfold isSur (\lam c =>
    \case p c \with {
      | inP (a, g_fa=c) => inP (f a, g_fa=c)
    }
  )

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\data Set (A : \Set) : \Set
  | set (
        \Sigma
        (contains : Subs A)
        (∃ (xs : Array A) (\Pi (x : A) -> contains x <-> ∃ (n : _) (xs n = x)))
    )

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => (=, \lam {x} {y} p => sym (transport (__ x) p idp))

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => \let subset => \lam a => f a a
     \in \case p subset \with {
      | inP (a, f_a=subset) => {?}
    }

-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
