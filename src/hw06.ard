\import Algebra.Meta
\import Utils
\import hw01 (gcd)
\import lect05
\import lect06

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A
  | (a, b) => \new Pair {
    | fst_ => b
    | snd_ => a
  }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair B A {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => p.p

\func one-isPos : PosNat 1 => \new PosNat {
  | p => ()
}

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record CoprimePairs (x y : Nat) (p : gcd x y = 1)

\type CoprimeTo60 => CoprimePairs 60

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor {
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | left-id  {A B : \Set} (a : A) (h : A -> F B) : (return a >>= h) = h a
  | right-id {A : \Set} (m : F A) : (m >>= return) = m
  | assoc    {A B C : \Set} (m : F A) (g : A -> F B) (h : B -> F C) : ((m >>= g) >>= h) = (m >>= \lam x => g x >>= h)

  \default fmap {A B : \Set} (f : A -> B) (a : F A) : F B => a >>= (\lam x => return (f x))

  \default fmap-id {A : \Set} (x : F A) : fmap (\lam a => a) x = x => right-id x

  \default fmap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (x : F A) : fmap (\lam a => g (f a)) x = fmap g (fmap f x) =>
    equation
      (fmap (\lam a => g (f a)) x) { idp }
      (x >>= (\lam x => return (g (f x)))) { pmap (x >>=) (funExt' (\lam x => lemma1 f g x)) }
      (x >>= (\lam x => return (f x) >>= (\lam x => return (g x)))) { lemma2 f g x }
      (fmap g (fmap f x))

  \func lemma1 {A B C : \Set} (f : A -> B) (g : B -> C) (x : A)
    : return (g (f x)) = (return (f x) >>= (\lam x => return (g x)))
    => sym (left-id (f x) (\lam x => return (g x)))

  \func lemma2 {A B C : \Set} (f : A -> B) (g : B -> C) (x : F A)
    : (x >>= (\lam x => return (f x) >>= (\lam x => return (g x)))) = fmap g (fmap f x)
    => sym (assoc x (\lam a => return (f a)) (\lam b => return (g b)))
}


-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return {A : \Set} (a : A) : Maybe A => just a

  | >>= {A B : \Set} (x : Maybe A) (f : A -> Maybe B) : Maybe B \elim x {
    | nothing => nothing
    | just a => f a
  }

  | left-id {A B : \Set} (a : A) (h : A -> Maybe B) : (return a >>= h) = h a => idp

  | right-id {A : \Set} (m : Maybe A) : (m >>= return) = m \elim m {
    | nothing => idp
    | just a => idp
  }

  | assoc {A B C : \Set} (m : Maybe A) (g : A -> Maybe B) (h : B -> Maybe C)
          : ((m >>= g) >>= h) = (m >>= \lam x => g x >>= h) \elim m {
    | nothing => idp
    | just a => idp
  }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Set) : Monad (State S)
  | return {A : \Set} (a : A) : State S A => \new State { | state => \lam s => (s, a) }

  | >>= {A B : \Set} (x : State S A) (f : A -> State S B) : State S B =>
      \new State {
        | state => \lam s => \case x.state s \with {
          | (s', a) => state {f a} s'
        }
      }

  | left-id {A B : \Set} (a : A) (h : A -> State S B) : (return a >>= h) = h a => idp

  | right-id {A : \Set} (m : State S A) : (m >>= return) = m => idp

  | assoc {A B C : \Set} (m : State S A) (g : A -> State S B) (h : B -> State S C)
      : ((m >>= g) >>= h) = (m >>= \lam x => g x >>= h) => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance State'Monad (S : \Set) : Monad (State' S) -- TODO